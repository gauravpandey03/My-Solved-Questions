#include <vector>
#include <limits>

class Solution {
public:
    int minFallingPathSum(std::vector<std::vector<int>>& matrix) {
        int n = matrix.size();
        
        std::vector<std::vector<int>> dp(n, std::vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = matrix[0][i];
        }
        
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                dp[i][j] = matrix[i][j] + std::min({dp[i-1][j], (j > 0) ? dp[i-1][j-1] : std::numeric_limits<int>::max(), (j < n-1) ? dp[i-1][j+1] : std::numeric_limits<int>::max()});
            }
        }
        
        int minSum = std::numeric_limits<int>::max();
        for (int j = 0; j < n; ++j) {
            minSum = std::min(minSum, dp[n-1][j]);
        }
        
        return minSum;
    }
};
