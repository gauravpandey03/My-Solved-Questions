/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        unordered_map<TreeNode*, int> memo;
        return robHelper(root, memo);
    }

private:
    int robHelper(TreeNode* node, unordered_map<TreeNode*, int>& memo) {
        if (node == nullptr) {
            return 0;
        }
        if (memo.find(node) != memo.end()) {
            return memo[node];
        }
        int robCurrent = node->val;
        if (node->left) {
            robCurrent += robHelper(node->left->left, memo) + robHelper(node->left->right, memo);
        }
        if (node->right) {
            robCurrent += robHelper(node->right->left, memo) + robHelper(node->right->right, memo);
        }
        int skipCurrent = robHelper(node->left, memo) + robHelper(node->right, memo);
        memo[node] = max(robCurrent, skipCurrent);

        return memo[node];
    }
};