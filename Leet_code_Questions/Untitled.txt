



983. Minimum Cost For Tickets



User
class Solution {
public:
    int mincostTickets(vector<int>& days, vector<int>& cost) {
        int n= days.size();
        vector<int >  dp(n+1,0);

        if(n==0){return 0;}
        if(n>1){
            dp[0]=0;
            for(int i=1; i<=n;i++){
                dp[i]=min(dp[i-1]+cost[0],dp[i-6]+cost[1],dp[i-30]+cost[2]);
        }

        
    }
    return dp[n-1];
    }






#include <vector>
#include <algorithm>

class Solution {
public:
    int mincostTickets(std::vector<int>& days, std::vector<int>& cost) {
        int n = days.size();
        std::vector<int> dp(n + 1, 0);

        for (int i = 1; i <= n; i++) {
            if(i < 7){
                dp[i] = dp[i - 1] + cost[0];
            }
            else if(i == 7){
                dp[i] = std::min(dp[i - 1] + cost[0], cost[1]);
            }
            else if(i > 7){
                dp[i] = std::min(dp[i - 1] + cost[0], dp[i - 7] + cost[1]);
            }
            if(i == 30){
                dp[i] = std::min(std::min(dp[i - 1] + cost[0], dp[i - 7] + cost[1]), cost[2]);
            }
            else if(i > 30){
                dp[i] = std::min(std::min(dp[i - 1] + cost[0], dp[i - 7] + cost[1]), dp[i - 30] + cost[2]);
            }
        }
        return  dp[n];
    }
};







#include <vector>
#include <algorithm>

class Solution {
public:
    int mincostTickets(std::vector<int>& days, std::vector<int>& cost) {
        int n = days.size();
        std::vector<int> dp(n + 1, 0);

        if (n == 0) {
            return 0;
        }

        for (int i = 1; i <= n; i++) {
            dp[i] = std::min({dp[i - 1] + cost[0], dp[std::max(0, i - 6)] + cost[1], dp[std::max(0, i - 30)] + cost[2]});
        }

        return dp[n];
    }
};




#include <vector>
#include <algorithm>

class Solution {
public:
    int mincostTickets(std::vector<int>& days, std::vector<int>& costs) {
        int n = days.size();
        std::vector<int> dp(n + 1, 0);

        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] + costs[0];  // 1-day pass

            int j;
            for (j = i - 1; j >= 0; j--) {
                if (days[i - 1] - days[j] >= 7) {
                    break;
                }
            }
            dp[i] = std::min(dp[i], dp[j + 1] + costs[1]);  // 7-day pass

            for (j = i - 1; j >= 0; j--) {
                if (days[i - 1] - days[j] >= 30) {
                    break;
                }
            }
            dp[i] = std::min(dp[i], dp[j + 1] + costs[2]);  // 30-day pass
        }

        return dp[n];
    }
};

