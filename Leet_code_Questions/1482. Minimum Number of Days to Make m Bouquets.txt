class Solution {
public:
    bool possible(vector<int> &bloomDay, int day, int m, int k) {
        int n = bloomDay.size();
        int cnt = 0;
        int nbd = 0;
        for (int i = 0; i < n; i++) {
            if (bloomDay[i] <= day) {
                cnt++;
            } else {
                nbd += cnt / k;
                cnt = 0;
            }
        }
        nbd += cnt / k;
        return nbd >= m;
    }

    int minDays(vector<int>& bloomDay, int m, int k) {
        int minDay = *min_element(bloomDay.begin(), bloomDay.end());
        int maxDay = *max_element(bloomDay.begin(), bloomDay.end());

        while (minDay <= maxDay) {
            int mid = minDay + (maxDay - minDay) / 2;
            if (possible(bloomDay, mid, m, k)) {
                // Check for a smaller day in the left half
                maxDay = mid - 1;
            } else {
                // Check for a larger day in the right half
                minDay = mid + 1;
            }
        }

        return (minDay > *max_element(bloomDay.begin(), bloomDay.end())) ? -1 : minDay;
    }
};
