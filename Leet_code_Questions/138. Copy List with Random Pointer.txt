
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (!head) {
            return nullptr;
        }

        
        Node* temp = head;
        while (temp != nullptr) {
            Node* newNode = new Node(temp->val);
            newNode->next = temp->next;
            temp->next = newNode;
            temp = newNode->next;
        }

        temp = head;
        while (temp != nullptr) {
            if (temp->random != nullptr) {
                temp->next->random = temp->random->next;
            }
            temp = temp->next->next;
        }

        
        Node* newHead = head->next;
        Node* original = head;
        Node* copy = newHead;

        while (original != nullptr) {
            original->next = original->next->next;
            copy->next = (copy->next != nullptr) ? copy->next->next : nullptr;

            original = original->next;
            copy = copy->next;
        }

        return newHead;
    }
};
